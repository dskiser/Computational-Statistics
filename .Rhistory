?ploy
?plot
# Visualization of approximate pmf of s
plot(pmf, main = "Approximation of pmf of s", type = "h", ylim = c(0, 0.04))
set.seed(444)
# Function for bivariate Gibbs sampler
bivar_gibbs <- function(M, n, s, theta) {
alpha_0 <- 2.0
beta_0 <- 6.4
for(i in 2:M) {
s[i] <- rbinom(1, n, theta[i - 1])
theta[i] <- rbeta(1, shape1 = alpha_0 + s[i], shape2 = beta_0 + n - s[i])
}
# calculate approximate pmf of s
pmf <- numeric(max(s))
for(i in 0:max(s)) {
pmf[i] <- sum(s == i) / M
}
return(list(s, theta, pmf))
}
M <- 10000
n <- 74
empty_s <- numeric(M)
empty_s[1] <- 16
empty_theta <- numeric(M)
empty_theta[1] <- empty_s[1] / n
params <- bivar_gibbs(M, n, empty_s, empty_theta)
s <- unlist(params[1])
theta <- unlist(params[2])
pmf <- unlist(params[3])
# Visualization of approximate pmf of s
plot(pmf, main = "Approximation of pmf of s", type = "h", ylim = c(0, 0.04))
# Histogram of s with approximate pmf overlaid
hist(s, freq = F, ylim = c(0, 0.04))
points(pmf, col="blue", type = "h")
# store results for comparison with new sampler with n not fixed
s_n_fixed <- s
pmf_n_fixed <- pmf
theta_n_fixed <- theta
# median of theta
median_n_fixed <- median(theta)
median_n_fixed
# Histogram of s with approximate pmf overlaid
hist(s, freq = F, ylim = c(0, 0.04) fill = "red")
# Histogram of s with approximate pmf overlaid
hist(s, freq = F, ylim = c(0, 0.04), fill = "red")
points(pmf, col="blue", type = "h")
# store results for comparison with new sampler with n not fixed
s_n_fixed <- s
pmf_n_fixed <- pmf
theta_n_fixed <- theta
# median of theta
median_n_fixed <- median(theta)
median_n_fixed
# Histogram of s with approximate pmf overlaid
hist(s, freq = F, ylim = c(0, 0.04), col = "red")
points(pmf, col="blue", type = "h")
# store results for comparison with new sampler with n not fixed
s_n_fixed <- s
pmf_n_fixed <- pmf
theta_n_fixed <- theta
# median of theta
median_n_fixed <- median(theta)
median_n_fixed
# Visualization of approximate pmf of s
plot.ts(pmf, main = "Approximation of pmf of s", type = "h", ylim = c(0, 0.04), ylab = "s")
# Trace plot of s
plot.ts(s, type = "l", main = "Trace plot of s")
# Trace plot of theta
plot.ts(theta, type = "l", main = "Trace plot of theta")
# Trace plot for both s and theta
plot(s[1:10000], theta[1:10000], type = "l", col = col1,
main = "Trace plot of s and theta when n known and unknown", ylab = expression(theta),
xlab = "s")
# Histogram of s with n known and unknown
col1 <- rgb(0, 0, 255, max = 255, alpha = 60)
col2 <- rgb(255, 0, 0, max = 255, alpha = 60)
hist(s, freq = F, breaks = pretty(0:80, n = 50), ylim = c(0, 0.05), main = "", xlab = "s",
col = col1)
opar <- par(no.readonly = TRUE)
par(new = TRUE)
hist(s_n_fixed, freq = F, breaks = pretty(0:80, n = 50), ylim = c(0, 0.05), xlab = "s",
col = col2, main = "Comparison of distribution of s when n is known and unknown")
legend(x = 50, y = 0.045, legend = c("n known", "n unknown"), fill = c(col2, col1))
par(opar)
# Compare convergence results using trace plots
# Trace plot of s
plot(s, type = "l", main = "Trace plot of s when n known and unknown", col = col1)
lines(s_n_fixed, col = col2)
legend(x = 7000, y = 70, legend = c("n known", "n unknown"), fill = c(col2, col1))
# Trace plot of theta
plot(theta, type = "l", main = "Trace plot of theta when n known and unknown", col = col1)
lines(theta_n_fixed, col = col2)
legend(x = 7000, y = 0.8, legend = c("n known", "n unknown"), fill = c(col2, col1))
# Trace plot of s
plot.ts(s, type = "l", main = "Trace plot of s", xlab = "iterations")
# Trace plot of theta
plot.ts(theta, type = "l", main = "Trace plot of theta", xlab = "iterations")
